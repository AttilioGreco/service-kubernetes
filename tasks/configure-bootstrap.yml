---
- name: configure-bootstrap | create "{{ cluster_name }}-kube-apiserver.service.automium.consul" record in /etc/hosts for consul boostrap
  lineinfile:
    state: present
    path: /etc/hosts
    line: "{{ ansible_default_ipv4['address'] }} {{ cluster_name }}-kube-apiserver.service.automium.consul"
  when:
    - master == "true"

- name: configure-bootstrap | create kubeadm configurations
  template:
    src: templates/kubeadm/kubeadm.init.yml.j2
    dest: "/etc/kubernetes/kubeadm-conf.yml"
    
- name: configure-bootstrap | bootstrap first master
  command: >-
    kubeadm init
    --config /etc/kubernetes/kubeadm-conf.yml
    --upload-certs
  register: kubeadm_upload_cert

- name: deploy consul service account
  copy:
    src: kubernetes/consul_cluster_rolebinding.yaml
    dest: /tmp/consul_cluster_rolebinding.yaml

- name: configure-boostrap | create kubeconfig for consul
  shell: |
    #!/bin/bash
    
    set -e 
    
    # Export kubeconfig
    export KUBECONFIG=/etc/kubernetes/admin.conf
    
    # Export hostname
    export HOSTNAME="$(hostname)"
    # Setup consul cluster role binding
    kubectl apply -f /tmp/consul_cluster_rolebinding.yaml
    # Retrieve data
    CONSUL_SA_SECRET="$(kubectl -n kube-system get sa consul-node-check -o jsonpath='{.secrets[0].name}')"
    export CONSUL_TOKEN="$(kubectl -n kube-system get secret ${CONSUL_SA_SECRET} -o jsonpath='{.data.token}' | base64 -d)"
    export CONSUL_CRT="$(kubectl -n kube-system get secret ${CONSUL_SA_SECRET} -o jsonpath='{.data.ca\.crt}')"
    
    mkdir -p /opt/consul/.kube

    cat > /opt/consul/.kube/config << EOF
    apiVersion: v1
    clusters:
    - cluster:
        certificate-authority-data: ${CONSUL_CRT}
        server: https://${HOSTNAME}:6443
      name: cluster.local
    contexts:
    - context:
        cluster: cluster.local
        user: consul-node-check
      name: consul-node-check@cluster.local
    current-context: consul-node-check@cluster.local
    kind: Config
    preferences: {}
    users:
    - name: consul-node-check
      user:
        token: ${CONSUL_TOKEN}
    EOF

    chown consul:consul -R /opt/consul/.kube
